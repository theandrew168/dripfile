Templates:
* Pure func: template + data = output
* Are forms coupled to specific templates? I think so.
* Can have multiple forms in one template
* You know I love locality (forms close to templates?)
* Impl a design structure similar to storage?

html.Site.Index.Execute(...)
html.Site.AuthLogin.Execute(w, html.Site.AuthLoginParams{})
  or
html.Site.Auth.Login.Execute(w, html.Site.Auth.LoginParams{})

html.Error400(w, html.Error400Params{})
html.Error500(w, html.Error500Params{})

Template -> Form -> Validator

type Site struct {
    Index        *template.Template
    AuthLogin    *template.Template
    AuthRegister *template.Template
}

^^^
this doesn't work because it can't enforce the param types

type Site struct {
    Index(w io.Writer, p IndexParams) error
    IndexTemplate(w io.Writer, p IndexParams) error
    IndexRender(w io.Writer, p IndexParams) error
    RenderIndex(w io.Writer, p IndexParams) error

    AuthLogin(w io.Writer, p AuthLoginParams) error
    AuthRegister(w io.Writer, p AuthRegisterParams) error
}

Impl:

//go:embed *
var files embed.FS

type Site struct {
    files fs.FS
}

func NewSite(files fs.FS) {
    ...
}

func (s *Site) Index(w io.Writer, p IndexParams) error {
    // check os.Getenv for where to load
    // either embed.FS or os.DirFS
}


// nothing shared between trees

html/template
  site
    index
    auth/
      login
      register
  app
    index (dashboard)
    location/
      create
      read
      list
    transfer/
      ...
  api
    index (swagger / redoc)
  error
    400
    404
    405
    500

html/
  html.go
  site.go
  app.go
  api.go
  error.go
  template/
    
or

// top-level imports from children
html/
  html.go
  site/
    html.go
    template/
      index.html
      auth/
        login.html
        register.html
  app/
    html.go
    ...
